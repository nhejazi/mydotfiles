# ==============================================================================
# my .Rprofile configuration (symlinked to ~/.Rprofile)
# ==============================================================================

# avoid package library issues with R version changes
if (as.character(Sys.info()["effective_user"]) %in%
  c("nimahejazi", "nhejazi", "nsh")) {
    if (dir.exists("~/.Rlibrary")) {
      try(.libPaths("~/.Rlibrary"))
    }
}

# Give REPL prompts that are clearer
options(prompt = "R > ", continue = "... ")

# Stop asking for CRAN mirror every time
options("repos" = c(CRAN = "https://cran.rstudio.com/"))

# Create a new invisible environment for all the functions to go in.
.env <- new.env()

# Returns a logical vector TRUE for elements of X not in Y
.env$"%ni%" <- function(x, y) { !(x %in% y) }

# List all functions in a package (also from @_inundata)
.env$lsp <- function(package, all.names = FALSE, pattern) {
    package <- deparse(substitute(package))
    ls(
        pos = paste("package", package, sep = ":"),
        all.names = all.names,
        pattern = pattern
    )
}

# Open Finder to the current directory on Mac
.env$o <- function(...) if(Sys.info()[1] == "Darwin") system("open .")

# Attach all the variables above
attach(.env)

# Avoid this awful default issue permanently
options(stringsAsFactors = FALSE)

# Set a longer print history than normal
options(max.print = 100)

# Follow convention for 80 columns
options(width = 80)

# No stars. Stars are bad for statistics.
options(show.signif.stars = FALSE)

# Tab-complete package names when calling `library()` and `require()`
utils::rc.settings(ipck = TRUE)

# Run at R startup (includes pasting timestamp to .Rhistory file)
.First <- function() {
  if(interactive()) {
    utils::timestamp(, prefix = paste("##------ [", getwd(), "] ", sep = ""))
    cat("\nSuccessfully loaded .Rprofile at", base::date(), "\n")
  }
}

# Run before R closes (includes saving interactive console history)
.Last <- function() {
  if(interactive()) {
    hist_file <- Sys.getenv("R_HISTFILE")
    if(hist_file == "") hist_file <- "~/.RHistory"
    savehistory(hist_file)
    cat("\nGoodbye at ", base::date(), "\n")
  }
}

# Load select packages when not using RStudio
if (interactive() & Sys.getenv("RSTUDIO") != 1) {
  # load useful packages if installed
  pkg_list <- c("devtools", "remotes", "usethis", "fcuk", "nima")
  for (pkg in pkg_list) {
    if (pkg %in% utils::installed.packages()[, 1]) {
      library(pkg)
    }
  }

  # load package colorout at startup if terminal colors supported
  if ("colorout" %in% utils::installed.packages()[, 1]) {
    if ("256color" %in% unlist(strsplit(Sys.getenv("TERM"), "-")) {
      library("colorout")
    }
  }
}

if (interactive()) {
  # enter the Tidyverse and other core tools
  if ("tidyverse" %in% utils::installed.packages()[, 1]) {
    library("tidyverse")
  }

  # pygments supported color schemes; default scheme is "native"
  options(radian.color_scheme = "native")

  # either  `"emacs"` (default) or `"vi"`.
  options(radian.editing_mode = "vi")

  # indent continuation lines
  # turn this off if you want to copy code without the extra indentation;
  # but it leads to less elegent layout
  options(radian.indent_lines = TRUE)

  # auto match brackets and quotes
  options(radian.auto_match = TRUE)

  # auto indentation for new line and curly braces
  options(radian.auto_indentation = TRUE)
  options(radian.tab_size = 4)

  # pop up completion while typing
  options(radian.complete_while_typing = TRUE)
  # timeout in seconds to cancel completion if it takes too long
  # set it to 0 to disable it
  options(radian.completion_timeout = 0.05)

  # automatically adjust R buffer size based on terminal width
  options(radian.auto_width = TRUE)

  # insert new line between prompts, turning it off may hide buffered lines
  options(radian.insert_new_line = TRUE)

  # when using history search, do not show duplicate results
  options(radian.history_search_no_duplicates = FALSE)

  # show vi mode state when radian.editing_mode is `vi`
  options(radian.show_vi_mode_prompt = TRUE)
  options(radian.vi_mode_prompt = "\033[34m[{}]\033[0m ")

  # suppress the loading message for reticulate
  options(radian.suppress_reticulate_message = FALSE)
  # enable reticulate prompt and trigger `~`
  options(radian.enable_reticulate_prompt = TRUE)
}
