####### ====================================================== ################
####### my .Rprofile configuration (symlinked to ~/.Rprofile)  ################
####### ====================================================== ################

## avoid package library issues with R version changes
if (as.character(Sys.info()["effective_user"]) %in%
  c("nimahejazi", "nhejazi", "nsh")) {
    if (dir.exists("~/.Rlibrary")) {
      try(.libPaths("~/.Rlibrary"))
    }
}

## Give REPL prompts that are clearer
options(prompt = "R > ", continue = "... ")

## Stop asking for CRAN mirror every time
options("repos" = c(CRAN = "https://cran.rstudio.com/"))

## Create a new invisible environment for all the functions to go in.
.env <- new.env()

## Returns a logical vector TRUE for elements of X not in Y
.env$"%ni%" <- function(x, y) { !(x %in% y) }

## Strip row names from a data frame (stolen from plyr)
.env$unrowname <- function(x) {
    rownames(x) <- NULL
    x
}

## List objects and classes (from @_inundata, mod by ateucher)
.env$lsa <- function() {
    obj_type <- function(x) class(get(x, envir = .GlobalEnv))  # define env
    foo = data.frame(sapply(ls(envir = .GlobalEnv), obj_type))
    foo$object_name = rownames(foo)
    names(foo)[1] = "class"
    names(foo)[2] = "object"
    return(unrowname(foo))
}

## List all functions in a package (also from @_inundata)
.env$lsp <- function(package, all.names = FALSE, pattern) {
    package <- deparse(substitute(package))
    ls(
        pos = paste("package", package, sep = ":"),
        all.names = all.names,
        pattern = pattern
    )
}

## Open Finder to the current directory on Mac
.env$o <- function(...) if(Sys.info()[1] == "Darwin") system("open .")

## Attach all the variables above
attach(.env)

## Trying to avoid this problem permanently (WARNING: less reproducible code)
options(stringsAsFactors = FALSE)

## set a longer print history than normal
options(max.print = 100)

## follow convention for 80 columns
options(width = 80)

## No stars. Stars are bad.
options(show.signif.stars = FALSE)

## Tab-complete package names when calling `library()` and `require()`
utils::rc.settings(ipck = TRUE)

## run at R startup (includes pasting timestamp to Rhistory file)
.First <- function() {
  if(interactive()) {
    utils::timestamp(, prefix = paste("##------ [", getwd(), "] ", sep = ""))
    cat("\nSuccessfully loaded .Rprofile at", base::date(), "\n")
  }
}

## run before R closes (includes saving interactive console history)
.Last <- function() {
  if(interactive()) {
    hist_file <- Sys.getenv("R_HISTFILE")
    if(hist_file == "") hist_file <- "~/.RHistory"
    savehistory(hist_file)
    cat("\nGoodbye at ", base::date(), "\n")
  }
}

## load select packages when not using RStudio
if (interactive() & Sys.getenv("RSTUDIO") != 1) {
  ## load package prompt and customize R prompt
  if ("prompt" %in% utils::installed.packages()[, 1]) {
    library("prompt")
    set_prompt(prompt_fancy)
  }

  ## load package colorout at startup
  if ("colorout" %in% utils::installed.packages()[, 1]) {
    if(Sys.getenv("TERM") == "xterm-256color") {
      library("colorout")
    }
  }
}

## load package for typing corrections
if ("prettycode" %in% utils::installed.packages()[, 1]) {
  library("prettycode")
}

## load package for typing corrections
if ("fcuk" %in% utils::installed.packages()[, 1]) {
  library("fcuk")
}

## load my package with miscellaneous utility functions
if ("nima" %in% utils::installed.packages()[, 1]) {
  library("nima")
}

if (interactive()) {
  ## enter the Tidyverse and other core tools
  suppressMessages(require(usethis))
  suppressMessages(require(devtools))
  suppressMessages(require(tidyverse))
  suppressMessages(require(ProjectTemplate))

  ## make rice command line interface compatible with Nvim-R
  options(
    # color scheme see [here](https://help.farbox.com/pygments.html) for a list
    # of supported color schemes, default is `"native"`
    rtichoke.color_scheme = "native",

    # either  `"emacs"` (default) or `"vi"`.
    rtichoke.editing_mode = "emacs",

    # auto match brackets and quotes
    rtichoke.auto_match = FALSE,

    # auto indentation for new line and curly braces
    rtichoke.auto_indentation = TRUE,
    rtichoke.tab_size = 4,

    # pop up completion while typing
    rtichoke.complete_while_typing = TRUE,

    # automatically adjust R buffer size based on terminal width
    rtichoke.auto_width = TRUE,

    # insert new line between prompts
    rtichoke.insert_new_line = TRUE,

    # when using history search (ctrl-r/ctrl-s in emacs mode), do not show
    # duplicate results
    rtichoke.history_search_no_duplicates = FALSE,

    # custom prompt for different modes
    rtichoke.prompt = "\033[0;34mr$>\033[0m ",
    rtichoke.shell_prompt = "\033[0;31m#!>\033[0m ",
    rtichoke.browse_prompt = "\033[0;33mBrowse[{}]>\033[0m ",

    # supress the loading message for reticulate
    rtichoke.suppress_reticulate_message = FALSE
  )
}

